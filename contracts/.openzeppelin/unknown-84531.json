{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x387458fe22Bba3Bbcdf7e2fb800f466EA9140A35",
    "txHash": "0x5f346f0ec761684cf1a4a12ca797ba988c4e828d726d3438a7d06967e4513e82"
  },
  "proxies": [
    {
      "address": "0xA5C785362Ba67Aa92e0DfdcE3FE64bdD232b8d91",
      "txHash": "0x390397d9ee0e136c85bd38182171a919dee40e5425a6bd0e3dae1f12a3b2bd7f",
      "kind": "transparent"
    },
    {
      "address": "0x7cE74F107Eb97076E2Ca75dCD4cB7B4e53EB4d63",
      "txHash": "0x0f16a2dd5cb6df9cd01c56301c95dd4cd15cf461f76e6e5ee69377336ca45842",
      "kind": "transparent"
    },
    {
      "address": "0x9a0B5832EE237Fe228b30c7e7b7c425e02ef6226",
      "txHash": "0x7d4fadf068de8bc2fd8afc99e0f2004453f2ac2e6c30d1f4bdebe4134754b09b",
      "kind": "transparent"
    },
    {
      "address": "0x69B402a2f7D14301Fe2B4802e32929d969f37AbC",
      "txHash": "0x7e4bac9dcedcbff132f76e2fda2731999a5c94636ae69fa9dabd68f66a0acb91",
      "kind": "transparent"
    },
    {
      "address": "0x872B2B072a06DB145F2Cdf923eBa2C419bC58715",
      "txHash": "0xe4a57b9ed92675482b79a26baf6d7d7aa87482d6b82c986dcc1ddc0e55c5ef7c",
      "kind": "transparent"
    },
    {
      "address": "0x721e85D7Be61B2b10317478E4d0312FD9b5e2d1e",
      "txHash": "0xdca80d798272d8e52156839c5688bac80ee767e9bf2489c36759166d35970c4d",
      "kind": "transparent"
    },
    {
      "address": "0xDB93AD92769B3A80Cb60799D88b90f7d954A90F5",
      "txHash": "0x0f4dbab259b29a6d468515d7026b89cc81516dc62120c230e5b258f535a17daa",
      "kind": "transparent"
    },
    {
      "address": "0x07aE66EB19e501996cE3e49BA91EB2bD1086ed18",
      "txHash": "0xca6b4e344a7865e52dfe1822a80ee09c986d17077675a11a471177ca6fab58cb",
      "kind": "transparent"
    },
    {
      "address": "0xa6A3F542b1f93C8B4019efbcDAF3cc6Adb3E51aB",
      "txHash": "0x319066e388e6e74e4b8ded0ff11ff16d512684146525df21b5ac9fc360b8ebf7",
      "kind": "transparent"
    },
    {
      "address": "0xBB24DeF7aB385B841e57FDC6F581eEd6D5bCBCb7",
      "txHash": "0x23a807e722be6a64b96e010ad493dd245531ea2aa70ed61bc4c0252d03aaacc6",
      "kind": "transparent"
    }
  ],
  "impls": {
    "3b6ce02139cd28a48306058e5006a89e0a95895c6fb785add845ebb6ddb7c6d6": {
      "address": "0xd7770B76bF7FDe9Aab7f32102675d4112e58c325",
      "txHash": "0x29970b03c8c13de879cac704c2f21dfe43a1c8829a9001e34331fad59a98f0f4",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "301",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "302",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "303",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "304",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "305",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "353",
            "type": "t_mapping(t_address,t_struct(Counter)2113_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "354",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "355",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "eas",
            "offset": 0,
            "slot": "404",
            "type": "t_contract(IEAS)5305",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:19"
          },
          {
            "label": "easSchemaRegistry",
            "offset": 0,
            "slot": "405",
            "type": "t_contract(ISchemaRegistry)5350",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:20"
          },
          {
            "label": "terms",
            "offset": 0,
            "slot": "406",
            "type": "t_mapping(t_uint256,t_struct(Terms)4151_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:44"
          },
          {
            "label": "contractTerm",
            "offset": 0,
            "slot": "407",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:45"
          },
          {
            "label": "userTerms",
            "offset": 0,
            "slot": "408",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)4164_storage))",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:46"
          },
          {
            "label": "userAcceptedTerms",
            "offset": 0,
            "slot": "409",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:47"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IEAS)5305": {
            "label": "contract IEAS",
            "numberOfBytes": "20"
          },
          "t_contract(ISchemaRegistry)5350": {
            "label": "contract ISchemaRegistry",
            "numberOfBytes": "20"
          },
          "t_enum(TermStatus)4156": {
            "label": "enum PrivaSeal.TermStatus",
            "members": [
              "NONE",
              "ACCEPTED",
              "REJECTED",
              "REVOKED"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)4164_storage))": {
            "label": "mapping(address => mapping(uint256 => struct PrivaSeal.TermState))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)2113_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(TermState)4164_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.TermState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Terms)4151_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.Terms)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)2113_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(TermState)4164_storage": {
            "label": "struct PrivaSeal.TermState",
            "members": [
              {
                "label": "status",
                "type": "t_enum(TermStatus)4156",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deadline",
                "type": "t_uint64",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "attestId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Terms)4151_storage": {
            "label": "struct PrivaSeal.Terms",
            "members": [
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "website",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "updatable",
                "type": "t_bool",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "revocable",
                "type": "t_bool",
                "offset": 1,
                "slot": "3"
              },
              {
                "label": "termsUrl",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "easSchemaId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "createdOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "updatedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "pastSchemaIds",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "pastTermsUrl",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "320"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e6b61d318ef582c05114a4886a612cab1853db3b0a25971bd330840251aa292a": {
      "address": "0xAae5E2853708979C443053E385E3ECf33A32782C",
      "txHash": "0xd62791354434db400a42b2d45d7cf5968bbc92d9b37f61eb1d478a39349c0526",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "301",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "302",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "303",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "304",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "305",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "353",
            "type": "t_mapping(t_address,t_struct(Counter)2113_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "354",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "355",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "eas",
            "offset": 0,
            "slot": "404",
            "type": "t_contract(IEAS)5343",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:19"
          },
          {
            "label": "easSchemaRegistry",
            "offset": 0,
            "slot": "405",
            "type": "t_contract(ISchemaRegistry)5388",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:20"
          },
          {
            "label": "terms",
            "offset": 0,
            "slot": "406",
            "type": "t_mapping(t_uint256,t_struct(Terms)4151_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:44"
          },
          {
            "label": "contractTerm",
            "offset": 0,
            "slot": "407",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:45"
          },
          {
            "label": "userTerms",
            "offset": 0,
            "slot": "408",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)4164_storage))",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:46"
          },
          {
            "label": "userAcceptedTerms",
            "offset": 0,
            "slot": "409",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:47"
          },
          {
            "label": "_revocation",
            "offset": 0,
            "slot": "410",
            "type": "t_bool",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:49"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IEAS)5343": {
            "label": "contract IEAS",
            "numberOfBytes": "20"
          },
          "t_contract(ISchemaRegistry)5388": {
            "label": "contract ISchemaRegistry",
            "numberOfBytes": "20"
          },
          "t_enum(TermStatus)4156": {
            "label": "enum PrivaSeal.TermStatus",
            "members": [
              "NONE",
              "ACCEPTED",
              "REJECTED",
              "REVOKED"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)4164_storage))": {
            "label": "mapping(address => mapping(uint256 => struct PrivaSeal.TermState))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)2113_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(TermState)4164_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.TermState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Terms)4151_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.Terms)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)2113_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(TermState)4164_storage": {
            "label": "struct PrivaSeal.TermState",
            "members": [
              {
                "label": "status",
                "type": "t_enum(TermStatus)4156",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deadline",
                "type": "t_uint64",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "attestId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Terms)4151_storage": {
            "label": "struct PrivaSeal.Terms",
            "members": [
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "website",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "updatable",
                "type": "t_bool",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "revocable",
                "type": "t_bool",
                "offset": 1,
                "slot": "3"
              },
              {
                "label": "termsUrl",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "easSchemaId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "createdOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "updatedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "pastSchemaIds",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "pastTermsUrl",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "320"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "630f6b0c240e16710c0080fe1fe07081618cfeed0e3b6431c0a867076eaebed9": {
      "address": "0x5d263E4E6b0827A4Ed0a0Deb90ed0F6D2b311564",
      "txHash": "0x2912c4dbff7eba5a29df31e0ade458c57cd576ff9e0a8f245932c234418cf3d3",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "301",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "302",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "303",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "304",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "305",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "353",
            "type": "t_mapping(t_address,t_struct(Counter)2113_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "354",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "355",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "eas",
            "offset": 0,
            "slot": "404",
            "type": "t_contract(IEAS)6543",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:19"
          },
          {
            "label": "easSchemaRegistry",
            "offset": 0,
            "slot": "405",
            "type": "t_contract(ISchemaRegistry)6588",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:20"
          },
          {
            "label": "terms",
            "offset": 0,
            "slot": "406",
            "type": "t_mapping(t_uint256,t_struct(Terms)5351_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:44"
          },
          {
            "label": "contractTerm",
            "offset": 0,
            "slot": "407",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:45"
          },
          {
            "label": "userTerms",
            "offset": 0,
            "slot": "408",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5364_storage))",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:46"
          },
          {
            "label": "userAcceptedTerms",
            "offset": 0,
            "slot": "409",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:47"
          },
          {
            "label": "_revocation",
            "offset": 0,
            "slot": "410",
            "type": "t_bool",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:49"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IEAS)6543": {
            "label": "contract IEAS",
            "numberOfBytes": "20"
          },
          "t_contract(ISchemaRegistry)6588": {
            "label": "contract ISchemaRegistry",
            "numberOfBytes": "20"
          },
          "t_enum(TermStatus)5356": {
            "label": "enum PrivaSeal.TermStatus",
            "members": [
              "NONE",
              "ACCEPTED",
              "REJECTED",
              "REVOKED"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5364_storage))": {
            "label": "mapping(address => mapping(uint256 => struct PrivaSeal.TermState))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)2113_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(TermState)5364_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.TermState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Terms)5351_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.Terms)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)2113_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(TermState)5364_storage": {
            "label": "struct PrivaSeal.TermState",
            "members": [
              {
                "label": "status",
                "type": "t_enum(TermStatus)5356",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deadline",
                "type": "t_uint64",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "attestId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Terms)5351_storage": {
            "label": "struct PrivaSeal.Terms",
            "members": [
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "website",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "updatable",
                "type": "t_bool",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "revocable",
                "type": "t_bool",
                "offset": 1,
                "slot": "3"
              },
              {
                "label": "termsUrl",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "easSchemaId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "createdOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "updatedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "pastSchemaIds",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "pastTermsUrl",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "320"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "9c2e1f32cb137934a6281dda1ad2a57244c9c03c08c2993baceb9a5e11f86f4c": {
      "address": "0xE9E7FBb6e88033DB1d4f3C9B17b2E78d4567C07d",
      "txHash": "0x1ef53ae38f53aaf331d7f2fffb7a22c37004e0b9337058eb04b49d7e11c324c7",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "301",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "302",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "303",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "304",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "305",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "353",
            "type": "t_mapping(t_address,t_struct(Counter)2113_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "354",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "355",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "eas",
            "offset": 0,
            "slot": "404",
            "type": "t_contract(IEAS)6546",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:19"
          },
          {
            "label": "easSchemaRegistry",
            "offset": 0,
            "slot": "405",
            "type": "t_contract(ISchemaRegistry)6591",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:20"
          },
          {
            "label": "terms",
            "offset": 0,
            "slot": "406",
            "type": "t_mapping(t_uint256,t_struct(Terms)5351_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:44"
          },
          {
            "label": "contractTerm",
            "offset": 0,
            "slot": "407",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:45"
          },
          {
            "label": "userTerms",
            "offset": 0,
            "slot": "408",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5364_storage))",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:46"
          },
          {
            "label": "userAcceptedTerms",
            "offset": 0,
            "slot": "409",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:47"
          },
          {
            "label": "_revocation",
            "offset": 0,
            "slot": "410",
            "type": "t_bool",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:49"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IEAS)6546": {
            "label": "contract IEAS",
            "numberOfBytes": "20"
          },
          "t_contract(ISchemaRegistry)6591": {
            "label": "contract ISchemaRegistry",
            "numberOfBytes": "20"
          },
          "t_enum(TermStatus)5356": {
            "label": "enum PrivaSeal.TermStatus",
            "members": [
              "NONE",
              "ACCEPTED",
              "REJECTED",
              "REVOKED"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5364_storage))": {
            "label": "mapping(address => mapping(uint256 => struct PrivaSeal.TermState))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)2113_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(TermState)5364_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.TermState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Terms)5351_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.Terms)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)2113_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(TermState)5364_storage": {
            "label": "struct PrivaSeal.TermState",
            "members": [
              {
                "label": "status",
                "type": "t_enum(TermStatus)5356",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deadline",
                "type": "t_uint64",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "attestId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Terms)5351_storage": {
            "label": "struct PrivaSeal.Terms",
            "members": [
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "website",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "updatable",
                "type": "t_bool",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "revocable",
                "type": "t_bool",
                "offset": 1,
                "slot": "3"
              },
              {
                "label": "termsUrl",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "easSchemaId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "createdOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "updatedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "pastSchemaIds",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "pastTermsUrl",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "320"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e0654202818120ad590859c559f1950a818b968a4b84ebfa7fa082dd3173fb5b": {
      "address": "0x01Feb64F7163E7217E072a0e05db9EE8Ef19f429",
      "txHash": "0x4d7dd2453912b3027d6fa24348de5395a33571fa2706f2dcb90664c0ae6ed4f8",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "301",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "302",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "303",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "304",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "305",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "353",
            "type": "t_mapping(t_address,t_struct(Counter)2113_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "354",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "355",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "eas",
            "offset": 0,
            "slot": "404",
            "type": "t_contract(IEAS)6575",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:19"
          },
          {
            "label": "easSchemaRegistry",
            "offset": 0,
            "slot": "405",
            "type": "t_contract(ISchemaRegistry)6620",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:20"
          },
          {
            "label": "terms",
            "offset": 0,
            "slot": "406",
            "type": "t_mapping(t_uint256,t_struct(Terms)5351_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:45"
          },
          {
            "label": "contractTerm",
            "offset": 0,
            "slot": "407",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:46"
          },
          {
            "label": "userTerms",
            "offset": 0,
            "slot": "408",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5366_storage))",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:47"
          },
          {
            "label": "userAcceptedTerms",
            "offset": 0,
            "slot": "409",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:48"
          },
          {
            "label": "userCreatedTerms",
            "offset": 0,
            "slot": "410",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:49"
          },
          {
            "label": "userRejectedTerms",
            "offset": 0,
            "slot": "411",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:50"
          },
          {
            "label": "userRevokedTerms",
            "offset": 0,
            "slot": "412",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:51"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IEAS)6575": {
            "label": "contract IEAS",
            "numberOfBytes": "20"
          },
          "t_contract(ISchemaRegistry)6620": {
            "label": "contract ISchemaRegistry",
            "numberOfBytes": "20"
          },
          "t_enum(TermStatus)5356": {
            "label": "enum PrivaSeal.TermStatus",
            "members": [
              "NONE",
              "ACCEPTED",
              "REJECTED",
              "REVOKED"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5366_storage))": {
            "label": "mapping(address => mapping(uint256 => struct PrivaSeal.TermState))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)2113_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(TermState)5366_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.TermState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Terms)5351_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.Terms)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)2113_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(TermState)5366_storage": {
            "label": "struct PrivaSeal.TermState",
            "members": [
              {
                "label": "status",
                "type": "t_enum(TermStatus)5356",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deadline",
                "type": "t_uint64",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "attestId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "revokedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Terms)5351_storage": {
            "label": "struct PrivaSeal.Terms",
            "members": [
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "website",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "updatable",
                "type": "t_bool",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "revocable",
                "type": "t_bool",
                "offset": 1,
                "slot": "3"
              },
              {
                "label": "termsUrl",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "easSchemaId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "createdOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "updatedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "pastSchemaIds",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "pastTermsUrl",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "320"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "711692c7023cc066e8b03ebb7c29a7a838ea8c3471b8c68ffb0da1517cab8e42": {
      "address": "0xd5A34dE68a30D69eb849D0fFd6fC79C1ac218fC1",
      "txHash": "0x8adfe18d8eb3e8bdb8fd3393e4d8cd657f45f1d21ee279f21c84000ae014f93f",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "301",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "302",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "303",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "304",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "305",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "353",
            "type": "t_mapping(t_address,t_struct(Counter)2113_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "354",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "355",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "eas",
            "offset": 0,
            "slot": "404",
            "type": "t_contract(IEAS)6586",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:19"
          },
          {
            "label": "easSchemaRegistry",
            "offset": 0,
            "slot": "405",
            "type": "t_contract(ISchemaRegistry)6631",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:20"
          },
          {
            "label": "terms",
            "offset": 0,
            "slot": "406",
            "type": "t_mapping(t_uint256,t_struct(Terms)5351_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:45"
          },
          {
            "label": "contractTerm",
            "offset": 0,
            "slot": "407",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:46"
          },
          {
            "label": "userAcceptedTerms",
            "offset": 0,
            "slot": "408",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:48"
          },
          {
            "label": "userCreatedTerms",
            "offset": 0,
            "slot": "409",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:49"
          },
          {
            "label": "userRejectedTerms",
            "offset": 0,
            "slot": "410",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:50"
          },
          {
            "label": "userRevokedTerms",
            "offset": 0,
            "slot": "411",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:51"
          },
          {
            "label": "userTerms",
            "offset": 0,
            "slot": "412",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5366_storage))",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:53"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IEAS)6586": {
            "label": "contract IEAS",
            "numberOfBytes": "20"
          },
          "t_contract(ISchemaRegistry)6631": {
            "label": "contract ISchemaRegistry",
            "numberOfBytes": "20"
          },
          "t_enum(TermStatus)5356": {
            "label": "enum PrivaSeal.TermStatus",
            "members": [
              "NONE",
              "ACCEPTED",
              "REJECTED",
              "REVOKED"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5366_storage))": {
            "label": "mapping(address => mapping(uint256 => struct PrivaSeal.TermState))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)2113_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(TermState)5366_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.TermState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Terms)5351_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.Terms)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)2113_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(TermState)5366_storage": {
            "label": "struct PrivaSeal.TermState",
            "members": [
              {
                "label": "status",
                "type": "t_enum(TermStatus)5356",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deadline",
                "type": "t_uint64",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "attestId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "revokedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Terms)5351_storage": {
            "label": "struct PrivaSeal.Terms",
            "members": [
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "website",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "updatable",
                "type": "t_bool",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "revocable",
                "type": "t_bool",
                "offset": 1,
                "slot": "3"
              },
              {
                "label": "termsUrl",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "easSchemaId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "createdOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "updatedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "pastSchemaIds",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "pastTermsUrl",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "320"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "3cbd58b3f390af31a8983fcfa360ec07f7f51d51758e21b274e618f0299c1e82": {
      "address": "0x873914402f1A5Eb3F442619605a0266588A8e0F4",
      "txHash": "0x7e0d534666caf145f7336b0b13b500c8911fe9c0a16b81ea95f71c6a71f2ed93",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "301",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "302",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "303",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "304",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "305",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "353",
            "type": "t_mapping(t_address,t_struct(Counter)2113_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "354",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "355",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "eas",
            "offset": 0,
            "slot": "404",
            "type": "t_contract(IEAS)6625",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:19"
          },
          {
            "label": "easSchemaRegistry",
            "offset": 0,
            "slot": "405",
            "type": "t_contract(ISchemaRegistry)6670",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:20"
          },
          {
            "label": "terms",
            "offset": 0,
            "slot": "406",
            "type": "t_mapping(t_uint256,t_struct(Terms)5351_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:45"
          },
          {
            "label": "contractTerm",
            "offset": 0,
            "slot": "407",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:46"
          },
          {
            "label": "userTerms",
            "offset": 0,
            "slot": "408",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5366_storage))",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:48"
          },
          {
            "label": "userAcceptedTerms",
            "offset": 0,
            "slot": "409",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:50"
          },
          {
            "label": "userCreatedTerms",
            "offset": 0,
            "slot": "410",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:51"
          },
          {
            "label": "userRejectedTerms",
            "offset": 0,
            "slot": "411",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:52"
          },
          {
            "label": "userRevokedTerms",
            "offset": 0,
            "slot": "412",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:53"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IEAS)6625": {
            "label": "contract IEAS",
            "numberOfBytes": "20"
          },
          "t_contract(ISchemaRegistry)6670": {
            "label": "contract ISchemaRegistry",
            "numberOfBytes": "20"
          },
          "t_enum(TermStatus)5356": {
            "label": "enum PrivaSeal.TermStatus",
            "members": [
              "NONE",
              "ACCEPTED",
              "REJECTED",
              "REVOKED"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5366_storage))": {
            "label": "mapping(address => mapping(uint256 => struct PrivaSeal.TermState))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)2113_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(TermState)5366_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.TermState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Terms)5351_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.Terms)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)2113_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(TermState)5366_storage": {
            "label": "struct PrivaSeal.TermState",
            "members": [
              {
                "label": "status",
                "type": "t_enum(TermStatus)5356",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deadline",
                "type": "t_uint64",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "attestId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "revokedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Terms)5351_storage": {
            "label": "struct PrivaSeal.Terms",
            "members": [
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "website",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "updatable",
                "type": "t_bool",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "revocable",
                "type": "t_bool",
                "offset": 1,
                "slot": "3"
              },
              {
                "label": "termsUrl",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "easSchemaId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "createdOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "updatedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "pastSchemaIds",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "pastTermsUrl",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "320"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "368d184181ff67c170f1b636482fc8168d9890e2fec01e399a80cafa1de9e666": {
      "address": "0x80db38B56c8B1161b2804fC8Bf8915145Ed84FEb",
      "txHash": "0xb4fee1d27dfb5e44528ecc9f817a6762b852bd70b5f4530bceb838d0e08285f4",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "301",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "302",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "303",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "304",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "305",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "353",
            "type": "t_mapping(t_address,t_struct(Counter)2113_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "354",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "355",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "eas",
            "offset": 0,
            "slot": "404",
            "type": "t_contract(IEAS)6625",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:19"
          },
          {
            "label": "easSchemaRegistry",
            "offset": 0,
            "slot": "405",
            "type": "t_contract(ISchemaRegistry)6670",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:20"
          },
          {
            "label": "terms",
            "offset": 0,
            "slot": "406",
            "type": "t_mapping(t_uint256,t_struct(Terms)5351_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:45"
          },
          {
            "label": "contractTerm",
            "offset": 0,
            "slot": "407",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:46"
          },
          {
            "label": "userTerms",
            "offset": 0,
            "slot": "408",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5366_storage))",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:48"
          },
          {
            "label": "userAcceptedTerms",
            "offset": 0,
            "slot": "409",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:50"
          },
          {
            "label": "userCreatedTerms",
            "offset": 0,
            "slot": "410",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:51"
          },
          {
            "label": "userRejectedTerms",
            "offset": 0,
            "slot": "411",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:52"
          },
          {
            "label": "userRevokedTerms",
            "offset": 0,
            "slot": "412",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:53"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IEAS)6625": {
            "label": "contract IEAS",
            "numberOfBytes": "20"
          },
          "t_contract(ISchemaRegistry)6670": {
            "label": "contract ISchemaRegistry",
            "numberOfBytes": "20"
          },
          "t_enum(TermStatus)5356": {
            "label": "enum PrivaSeal.TermStatus",
            "members": [
              "NONE",
              "ACCEPTED",
              "REJECTED",
              "REVOKED"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5366_storage))": {
            "label": "mapping(address => mapping(uint256 => struct PrivaSeal.TermState))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)2113_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(TermState)5366_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.TermState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Terms)5351_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.Terms)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)2113_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(TermState)5366_storage": {
            "label": "struct PrivaSeal.TermState",
            "members": [
              {
                "label": "status",
                "type": "t_enum(TermStatus)5356",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deadline",
                "type": "t_uint64",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "attestId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "revokedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Terms)5351_storage": {
            "label": "struct PrivaSeal.Terms",
            "members": [
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "website",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "updatable",
                "type": "t_bool",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "revocable",
                "type": "t_bool",
                "offset": 1,
                "slot": "3"
              },
              {
                "label": "termsUrl",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "easSchemaId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "createdOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "updatedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "pastSchemaIds",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "pastTermsUrl",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "320"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "36c7c158d0851a92f2d4a19c9f92e5e03f7fce69bad3ecd7a09fdf86f605123b": {
      "address": "0x8499367E309Cfe6b939d4A20fb6789Bb922A17e3",
      "txHash": "0x0aefe2f247f350929c1a6b92d94fe8e96a7dbf53fd525a758c5208278f027b61",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "301",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "302",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "303",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "304",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "305",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "353",
            "type": "t_mapping(t_address,t_struct(Counter)2113_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "354",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "355",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "eas",
            "offset": 0,
            "slot": "404",
            "type": "t_contract(IEAS)6620",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:19"
          },
          {
            "label": "easSchemaRegistry",
            "offset": 0,
            "slot": "405",
            "type": "t_contract(ISchemaRegistry)6665",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:20"
          },
          {
            "label": "revocableSchemaUID",
            "offset": 0,
            "slot": "406",
            "type": "t_bytes32",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:22"
          },
          {
            "label": "nonRevocableSchemaUID",
            "offset": 0,
            "slot": "407",
            "type": "t_bytes32",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:23"
          },
          {
            "label": "terms",
            "offset": 0,
            "slot": "408",
            "type": "t_mapping(t_uint256,t_struct(Terms)5355_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:48"
          },
          {
            "label": "contractTerm",
            "offset": 0,
            "slot": "409",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:49"
          },
          {
            "label": "userTerms",
            "offset": 0,
            "slot": "410",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5370_storage))",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:51"
          },
          {
            "label": "userAcceptedTerms",
            "offset": 0,
            "slot": "411",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:53"
          },
          {
            "label": "userCreatedTerms",
            "offset": 0,
            "slot": "412",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:54"
          },
          {
            "label": "userRejectedTerms",
            "offset": 0,
            "slot": "413",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:55"
          },
          {
            "label": "userRevokedTerms",
            "offset": 0,
            "slot": "414",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:56"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IEAS)6620": {
            "label": "contract IEAS",
            "numberOfBytes": "20"
          },
          "t_contract(ISchemaRegistry)6665": {
            "label": "contract ISchemaRegistry",
            "numberOfBytes": "20"
          },
          "t_enum(TermStatus)5360": {
            "label": "enum PrivaSeal.TermStatus",
            "members": [
              "NONE",
              "ACCEPTED",
              "REJECTED",
              "REVOKED"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5370_storage))": {
            "label": "mapping(address => mapping(uint256 => struct PrivaSeal.TermState))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)2113_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(TermState)5370_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.TermState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Terms)5355_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.Terms)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)2113_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(TermState)5370_storage": {
            "label": "struct PrivaSeal.TermState",
            "members": [
              {
                "label": "status",
                "type": "t_enum(TermStatus)5360",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deadline",
                "type": "t_uint64",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "attestId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "revokedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Terms)5355_storage": {
            "label": "struct PrivaSeal.Terms",
            "members": [
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "website",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "updatable",
                "type": "t_bool",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "revocable",
                "type": "t_bool",
                "offset": 1,
                "slot": "3"
              },
              {
                "label": "termsUrl",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "easSchemaId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "createdOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "updatedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "pastSchemaIds",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "pastTermsUrl",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "320"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "749c22b2519182bafc99091f5e30923149663948bd5716e763a41c6dc192141a": {
      "address": "0x335e75E3f5Cf07726106dE132f2dDbbcE0F79742",
      "txHash": "0xcbed3da9bd69378dc07f6b3e963039e3514bcafd72c4c2efb3455b05ef65fd2d",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "301",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "302",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "303",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "304",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "305",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "353",
            "type": "t_mapping(t_address,t_struct(Counter)2113_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "354",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "355",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "eas",
            "offset": 0,
            "slot": "404",
            "type": "t_contract(IEAS)6688",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:19"
          },
          {
            "label": "easSchemaRegistry",
            "offset": 0,
            "slot": "405",
            "type": "t_contract(ISchemaRegistry)6733",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:20"
          },
          {
            "label": "revocableSchemaUID",
            "offset": 0,
            "slot": "406",
            "type": "t_bytes32",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:22"
          },
          {
            "label": "nonRevocableSchemaUID",
            "offset": 0,
            "slot": "407",
            "type": "t_bytes32",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:23"
          },
          {
            "label": "terms",
            "offset": 0,
            "slot": "408",
            "type": "t_mapping(t_uint256,t_struct(Terms)5355_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:48"
          },
          {
            "label": "contractTerm",
            "offset": 0,
            "slot": "409",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:49"
          },
          {
            "label": "userTerms",
            "offset": 0,
            "slot": "410",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5370_storage))",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:51"
          },
          {
            "label": "userAcceptedTerms",
            "offset": 0,
            "slot": "411",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:53"
          },
          {
            "label": "userCreatedTerms",
            "offset": 0,
            "slot": "412",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:54"
          },
          {
            "label": "userRejectedTerms",
            "offset": 0,
            "slot": "413",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:55"
          },
          {
            "label": "userRevokedTerms",
            "offset": 0,
            "slot": "414",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:56"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IEAS)6688": {
            "label": "contract IEAS",
            "numberOfBytes": "20"
          },
          "t_contract(ISchemaRegistry)6733": {
            "label": "contract ISchemaRegistry",
            "numberOfBytes": "20"
          },
          "t_enum(TermStatus)5360": {
            "label": "enum PrivaSeal.TermStatus",
            "members": [
              "NONE",
              "ACCEPTED",
              "REJECTED",
              "REVOKED"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5370_storage))": {
            "label": "mapping(address => mapping(uint256 => struct PrivaSeal.TermState))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)2113_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(TermState)5370_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.TermState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Terms)5355_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.Terms)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)2113_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(TermState)5370_storage": {
            "label": "struct PrivaSeal.TermState",
            "members": [
              {
                "label": "status",
                "type": "t_enum(TermStatus)5360",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deadline",
                "type": "t_uint64",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "attestId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "revokedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Terms)5355_storage": {
            "label": "struct PrivaSeal.Terms",
            "members": [
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "website",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "updatable",
                "type": "t_bool",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "revocable",
                "type": "t_bool",
                "offset": 1,
                "slot": "3"
              },
              {
                "label": "termsUrl",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "easSchemaId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "createdOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "updatedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "pastSchemaIds",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "pastTermsUrl",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "320"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "53cb07a29122ce56f5bdcb2470cdf3fb31b758a80cffd8e61289d8a451bcf165": {
      "address": "0xb760D9C0bbb3cC099659e416CA3FCa0b64Dcf8bE",
      "txHash": "0x5cd5109fb80959f47fd590ef24345e95c8da332ea040f1a33ecc067f86630718",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "301",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "302",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "303",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "304",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "305",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "353",
            "type": "t_mapping(t_address,t_struct(Counter)2113_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "354",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "355",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "eas",
            "offset": 0,
            "slot": "404",
            "type": "t_contract(IEAS)6884",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:19"
          },
          {
            "label": "easSchemaRegistry",
            "offset": 0,
            "slot": "405",
            "type": "t_contract(ISchemaRegistry)6929",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:20"
          },
          {
            "label": "revocableSchemaUID",
            "offset": 0,
            "slot": "406",
            "type": "t_bytes32",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:22"
          },
          {
            "label": "nonRevocableSchemaUID",
            "offset": 0,
            "slot": "407",
            "type": "t_bytes32",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:23"
          },
          {
            "label": "terms",
            "offset": 0,
            "slot": "408",
            "type": "t_mapping(t_uint256,t_struct(Terms)5357_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:49"
          },
          {
            "label": "contractTerm",
            "offset": 0,
            "slot": "409",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:50"
          },
          {
            "label": "userTerms",
            "offset": 0,
            "slot": "410",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5372_storage))",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:52"
          },
          {
            "label": "userAcceptedTerms",
            "offset": 0,
            "slot": "411",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:54"
          },
          {
            "label": "userCreatedTerms",
            "offset": 0,
            "slot": "412",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:55"
          },
          {
            "label": "userRejectedTerms",
            "offset": 0,
            "slot": "413",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:56"
          },
          {
            "label": "userRevokedTerms",
            "offset": 0,
            "slot": "414",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:57"
          },
          {
            "label": "privateTermRecipients",
            "offset": 0,
            "slot": "415",
            "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:58"
          },
          {
            "label": "userPrivateTerms",
            "offset": 0,
            "slot": "416",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:59"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IEAS)6884": {
            "label": "contract IEAS",
            "numberOfBytes": "20"
          },
          "t_contract(ISchemaRegistry)6929": {
            "label": "contract ISchemaRegistry",
            "numberOfBytes": "20"
          },
          "t_enum(TermStatus)5362": {
            "label": "enum PrivaSeal.TermStatus",
            "members": [
              "NONE",
              "ACCEPTED",
              "REJECTED",
              "REVOKED"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5372_storage))": {
            "label": "mapping(address => mapping(uint256 => struct PrivaSeal.TermState))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)2113_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
            "label": "mapping(uint256 => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(TermState)5372_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.TermState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Terms)5357_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.Terms)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)2113_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(TermState)5372_storage": {
            "label": "struct PrivaSeal.TermState",
            "members": [
              {
                "label": "status",
                "type": "t_enum(TermStatus)5362",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deadline",
                "type": "t_uint64",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "attestId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "revokedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Terms)5357_storage": {
            "label": "struct PrivaSeal.Terms",
            "members": [
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "website",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "updatable",
                "type": "t_bool",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "revocable",
                "type": "t_bool",
                "offset": 1,
                "slot": "3"
              },
              {
                "label": "termsUrl",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "easSchemaId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "createdOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "updatedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "pastSchemaIds",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "pastTermsUrl",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "isPrivate",
                "type": "t_bool",
                "offset": 0,
                "slot": "10"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "baed2a7565b40ea9127509c7d3a712635fa2ec212e86519ac1a05115cc69ac81": {
      "address": "0xcFA0CcF0a0091238935f78e5396c3B8bd137213F",
      "txHash": "0x969cbd946a83f7d4ddbd3d0c9a55161b2081a399253e7a307ccf238e9415011d",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "301",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "302",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "303",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "304",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "305",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "353",
            "type": "t_mapping(t_address,t_struct(Counter)2113_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "354",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "355",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "eas",
            "offset": 0,
            "slot": "404",
            "type": "t_contract(IEAS)6888",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:19"
          },
          {
            "label": "easSchemaRegistry",
            "offset": 0,
            "slot": "405",
            "type": "t_contract(ISchemaRegistry)6933",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:20"
          },
          {
            "label": "revocableSchemaUID",
            "offset": 0,
            "slot": "406",
            "type": "t_bytes32",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:22"
          },
          {
            "label": "nonRevocableSchemaUID",
            "offset": 0,
            "slot": "407",
            "type": "t_bytes32",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:23"
          },
          {
            "label": "terms",
            "offset": 0,
            "slot": "408",
            "type": "t_mapping(t_uint256,t_struct(Terms)5357_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:49"
          },
          {
            "label": "contractTerm",
            "offset": 0,
            "slot": "409",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:50"
          },
          {
            "label": "userTerms",
            "offset": 0,
            "slot": "410",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5372_storage))",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:52"
          },
          {
            "label": "userAcceptedTerms",
            "offset": 0,
            "slot": "411",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:54"
          },
          {
            "label": "userCreatedTerms",
            "offset": 0,
            "slot": "412",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:55"
          },
          {
            "label": "userRejectedTerms",
            "offset": 0,
            "slot": "413",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:56"
          },
          {
            "label": "userRevokedTerms",
            "offset": 0,
            "slot": "414",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:57"
          },
          {
            "label": "privateTermRecipients",
            "offset": 0,
            "slot": "415",
            "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:58"
          },
          {
            "label": "userPrivateTerms",
            "offset": 0,
            "slot": "416",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:59"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IEAS)6888": {
            "label": "contract IEAS",
            "numberOfBytes": "20"
          },
          "t_contract(ISchemaRegistry)6933": {
            "label": "contract ISchemaRegistry",
            "numberOfBytes": "20"
          },
          "t_enum(TermStatus)5362": {
            "label": "enum PrivaSeal.TermStatus",
            "members": [
              "NONE",
              "ACCEPTED",
              "REJECTED",
              "REVOKED"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5372_storage))": {
            "label": "mapping(address => mapping(uint256 => struct PrivaSeal.TermState))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)2113_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
            "label": "mapping(uint256 => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(TermState)5372_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.TermState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Terms)5357_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.Terms)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)2113_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(TermState)5372_storage": {
            "label": "struct PrivaSeal.TermState",
            "members": [
              {
                "label": "status",
                "type": "t_enum(TermStatus)5362",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deadline",
                "type": "t_uint64",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "attestId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "revokedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Terms)5357_storage": {
            "label": "struct PrivaSeal.Terms",
            "members": [
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "website",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "updatable",
                "type": "t_bool",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "revocable",
                "type": "t_bool",
                "offset": 1,
                "slot": "3"
              },
              {
                "label": "termsUrl",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "easSchemaId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "createdOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "updatedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "pastSchemaIds",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "pastTermsUrl",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "isPrivate",
                "type": "t_bool",
                "offset": 0,
                "slot": "10"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "8b2694a78a447ece11e1a268d86252f07de1bdddef8342b0b97fc00b1a083b66": {
      "address": "0xd784A07688995C5c8dd3189E9f86454b9f6b4c23",
      "txHash": "0xc94ae19241aa391afd8f1d0410fc844a4e290625b4077c0f4c2b3053faa0e31b",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "301",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "302",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "303",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "304",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "305",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "353",
            "type": "t_mapping(t_address,t_struct(Counter)2113_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "354",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "355",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "eas",
            "offset": 0,
            "slot": "404",
            "type": "t_contract(IEAS)6914",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:19"
          },
          {
            "label": "easSchemaRegistry",
            "offset": 0,
            "slot": "405",
            "type": "t_contract(ISchemaRegistry)6959",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:20"
          },
          {
            "label": "revocableSchemaUID",
            "offset": 0,
            "slot": "406",
            "type": "t_bytes32",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:22"
          },
          {
            "label": "nonRevocableSchemaUID",
            "offset": 0,
            "slot": "407",
            "type": "t_bytes32",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:23"
          },
          {
            "label": "terms",
            "offset": 0,
            "slot": "408",
            "type": "t_mapping(t_uint256,t_struct(Terms)5357_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:49"
          },
          {
            "label": "contractTerm",
            "offset": 0,
            "slot": "409",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:50"
          },
          {
            "label": "userTerms",
            "offset": 0,
            "slot": "410",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5372_storage))",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:52"
          },
          {
            "label": "userAcceptedTerms",
            "offset": 0,
            "slot": "411",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:54"
          },
          {
            "label": "userCreatedTerms",
            "offset": 0,
            "slot": "412",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:55"
          },
          {
            "label": "userRejectedTerms",
            "offset": 0,
            "slot": "413",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:56"
          },
          {
            "label": "userRevokedTerms",
            "offset": 0,
            "slot": "414",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:57"
          },
          {
            "label": "privateTermRecipients",
            "offset": 0,
            "slot": "415",
            "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:58"
          },
          {
            "label": "userPrivateTerms",
            "offset": 0,
            "slot": "416",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "contract": "PrivaSeal",
            "src": "contracts/PrivaSeal.sol:59"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IEAS)6914": {
            "label": "contract IEAS",
            "numberOfBytes": "20"
          },
          "t_contract(ISchemaRegistry)6959": {
            "label": "contract ISchemaRegistry",
            "numberOfBytes": "20"
          },
          "t_enum(TermStatus)5362": {
            "label": "enum PrivaSeal.TermStatus",
            "members": [
              "NONE",
              "ACCEPTED",
              "REJECTED",
              "REVOKED"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(TermState)5372_storage))": {
            "label": "mapping(address => mapping(uint256 => struct PrivaSeal.TermState))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)2113_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
            "label": "mapping(uint256 => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(TermState)5372_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.TermState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Terms)5357_storage)": {
            "label": "mapping(uint256 => struct PrivaSeal.Terms)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)2113_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(TermState)5372_storage": {
            "label": "struct PrivaSeal.TermState",
            "members": [
              {
                "label": "status",
                "type": "t_enum(TermStatus)5362",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "deadline",
                "type": "t_uint64",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "attestId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "revokedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Terms)5357_storage": {
            "label": "struct PrivaSeal.Terms",
            "members": [
              {
                "label": "contractAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "website",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "updatable",
                "type": "t_bool",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "revocable",
                "type": "t_bool",
                "offset": 1,
                "slot": "3"
              },
              {
                "label": "termsUrl",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "easSchemaId",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "createdOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "updatedOn",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "pastSchemaIds",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "pastTermsUrl",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "isPrivate",
                "type": "t_bool",
                "offset": 0,
                "slot": "10"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
